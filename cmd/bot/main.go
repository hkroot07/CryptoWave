// Cryptocurrency Guide Bot (Crypto Assistant)
// Essence: The bot provides up-to-date information on the rates of top
// cryptocurrencies (BTC, ETH, SOL), sets alerts on price thresholds
// The mine package provides the basic functionality of the bot
package main

import (
	"crypto-bot/internal/bot"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"

	// Importing a library to work with Telegram Bot API
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Structure for parsing the response from CoinGecko API
// JSON from the API will be automatically converted to this structure
type CoinGeckoResponse struct {
	Bitcoin struct {
		Usd float64 `json:"usd"`
	} `json:"bitcoin"`
}

// Function main
// Entry point to the program
func main() {
	// Initialize the database
	db := bot.InitDB()
	defer db.Close()

	token := os.Getenv("TELEGRAM_APITOKEN")
	if token == "" {
		log.Panic("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_APITOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
	}

	//Create a bot instance using the token
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	// Turn on debug mode
	botAPI.Debug = true

	// We display information that the bot was launched on behalf of its username
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", botAPI.Self.UserName)

	// We set up a channel from which we will receive updates (messages from users)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// GetUpdatesChan returns the channel from which we will read incoming messages.
	updates := botAPI.GetUpdatesChan(u)

	for update := range updates {

		if update.Message == nil || !update.Message.IsCommand() {
			continue
		}

		// Create a message for the reply
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
		chatID := update.Message.Chat.ID // Save the chat ID

		// Process the command
		switch update.Message.Command() {
		case "start":
			msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç ü§ñ\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/price [—Ç–∏–∫–µ—Ä] - –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\n/alert [—Ç–∏–∫–µ—Ä] [—Ü–µ–Ω–∞] [above/below] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n–ù–∞–ø—Ä–∏–º–µ—Ä: /alert BTC 50000 above"
		case "price", "p":
			// Get command arguments (e.g. "BTC" from "/price BTC")
			args := update.Message.CommandArguments()
			coin := strings.ToUpper(args)
			if coin == "" {
				coin = "BTC" // Default value
			}
			// Get price from API
			price, err := getCryptoPrice(coin)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: %v", err)
				msg.Text = "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üòï –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
			} else {
				msg.Text = fmt.Sprintf("üí∞ %s: $%.2f", coin, price)
			}
		case "alert":
			// Processing the command to set the alert
			// Format: /alert BTC 50000 above
			args := update.Message.CommandArguments()
			parts := strings.Split(args, " ")
			if len(parts) < 3 {
				msg.Text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /alert [—Ç–∏–∫–µ—Ä] [—Ü–µ–Ω–∞] [above/below]\n–ù–∞–ø—Ä–∏–º–µ—Ä: /alert BTC 50000 above"
				break
			}
			coin := strings.ToUpper(parts[0])
			threshold, err := strconv.ParseFloat(parts[1], 64)
			if err != nil {
				msg.Text = "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ."
				break
			}
			isAbove := true
			if strings.ToLower(parts[2]) == "below" {
				isAbove = false
			} else if strings.ToLower(parts[2]) != "above" {
				msg.Text = "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'above' –∏–ª–∏ 'below'."
				break
			}
			// Create a notification structure and save it in the database
			alert := bot.UserAlert{
				ChatID:    chatID,
				Coin:      coin,
				Threshold: threshold,
				IsAbove:   isAbove,
			}
			err = bot.SaveAlert(db, alert)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: %v", err)
				msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
			} else {
				directionText := "–≤—ã—à–µ"
				if !isAbove {
					directionText = "–Ω–∏–∂–µ"
				}
				msg.Text = fmt.Sprintf("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ %s —Å—Ç–∞–Ω–µ—Ç %s $ %.2f.", coin, directionText, threshold)
			}
		default:
			msg.Text = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π /start"
		}

		// Sending a message
		if _, err := botAPI.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}

// Function to get the price of a cryptocurrency
func getCryptoPrice(coinSymbol string) (float64, error) {
	if coinSymbol != "BTC" {
		return 0, fmt.Errorf("–ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ BTC")
	}
	// Forming a URL request to the API
	url := "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
	// Perform an HTTP GET request
	resp, err := http.Get(url)
	if err != nil {
		return 0, err
	}
	defer resp.Body.Close()
	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return 0, err
	}
	// Parse JSON into our structure
	var data CoinGeckoResponse
	err = json.Unmarshal(body, &data)
	if err != nil {
		return 0, err
	}
	// Return the price
	return data.Bitcoin.Usd, nil
}
